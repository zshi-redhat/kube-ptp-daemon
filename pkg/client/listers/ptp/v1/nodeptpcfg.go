/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zshi-redhat/kube-ptp-daemon/pkg/apis/ptp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodePTPCfgLister helps list NodePTPCfgs.
type NodePTPCfgLister interface {
	// List lists all NodePTPCfgs in the indexer.
	List(selector labels.Selector) (ret []*v1.NodePTPCfg, err error)
	// NodePTPCfgs returns an object that can list and get NodePTPCfgs.
	NodePTPCfgs(namespace string) NodePTPCfgNamespaceLister
	NodePTPCfgListerExpansion
}

// nodePTPCfgLister implements the NodePTPCfgLister interface.
type nodePTPCfgLister struct {
	indexer cache.Indexer
}

// NewNodePTPCfgLister returns a new NodePTPCfgLister.
func NewNodePTPCfgLister(indexer cache.Indexer) NodePTPCfgLister {
	return &nodePTPCfgLister{indexer: indexer}
}

// List lists all NodePTPCfgs in the indexer.
func (s *nodePTPCfgLister) List(selector labels.Selector) (ret []*v1.NodePTPCfg, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodePTPCfg))
	})
	return ret, err
}

// NodePTPCfgs returns an object that can list and get NodePTPCfgs.
func (s *nodePTPCfgLister) NodePTPCfgs(namespace string) NodePTPCfgNamespaceLister {
	return nodePTPCfgNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodePTPCfgNamespaceLister helps list and get NodePTPCfgs.
type NodePTPCfgNamespaceLister interface {
	// List lists all NodePTPCfgs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NodePTPCfg, err error)
	// Get retrieves the NodePTPCfg from the indexer for a given namespace and name.
	Get(name string) (*v1.NodePTPCfg, error)
	NodePTPCfgNamespaceListerExpansion
}

// nodePTPCfgNamespaceLister implements the NodePTPCfgNamespaceLister
// interface.
type nodePTPCfgNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodePTPCfgs in the indexer for a given namespace.
func (s nodePTPCfgNamespaceLister) List(selector labels.Selector) (ret []*v1.NodePTPCfg, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodePTPCfg))
	})
	return ret, err
}

// Get retrieves the NodePTPCfg from the indexer for a given namespace and name.
func (s nodePTPCfgNamespaceLister) Get(name string) (*v1.NodePTPCfg, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodeptpcfg"), name)
	}
	return obj.(*v1.NodePTPCfg), nil
}
