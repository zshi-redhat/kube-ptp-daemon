/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zshi-redhat/kube-ptp-daemon/pkg/apis/ptp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodePTPDevLister helps list NodePTPDevs.
type NodePTPDevLister interface {
	// List lists all NodePTPDevs in the indexer.
	List(selector labels.Selector) (ret []*v1.NodePTPDev, err error)
	// NodePTPDevs returns an object that can list and get NodePTPDevs.
	NodePTPDevs(namespace string) NodePTPDevNamespaceLister
	NodePTPDevListerExpansion
}

// nodePTPDevLister implements the NodePTPDevLister interface.
type nodePTPDevLister struct {
	indexer cache.Indexer
}

// NewNodePTPDevLister returns a new NodePTPDevLister.
func NewNodePTPDevLister(indexer cache.Indexer) NodePTPDevLister {
	return &nodePTPDevLister{indexer: indexer}
}

// List lists all NodePTPDevs in the indexer.
func (s *nodePTPDevLister) List(selector labels.Selector) (ret []*v1.NodePTPDev, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodePTPDev))
	})
	return ret, err
}

// NodePTPDevs returns an object that can list and get NodePTPDevs.
func (s *nodePTPDevLister) NodePTPDevs(namespace string) NodePTPDevNamespaceLister {
	return nodePTPDevNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodePTPDevNamespaceLister helps list and get NodePTPDevs.
type NodePTPDevNamespaceLister interface {
	// List lists all NodePTPDevs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NodePTPDev, err error)
	// Get retrieves the NodePTPDev from the indexer for a given namespace and name.
	Get(name string) (*v1.NodePTPDev, error)
	NodePTPDevNamespaceListerExpansion
}

// nodePTPDevNamespaceLister implements the NodePTPDevNamespaceLister
// interface.
type nodePTPDevNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodePTPDevs in the indexer for a given namespace.
func (s nodePTPDevNamespaceLister) List(selector labels.Selector) (ret []*v1.NodePTPDev, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodePTPDev))
	})
	return ret, err
}

// Get retrieves the NodePTPDev from the indexer for a given namespace and name.
func (s nodePTPDevNamespaceLister) Get(name string) (*v1.NodePTPDev, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodeptpdev"), name)
	}
	return obj.(*v1.NodePTPDev), nil
}
